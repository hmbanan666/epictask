generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  surname        String?
  username       String           @unique
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  Accounts       Account[]
  Sessions       Session[]
  TaskAssignment TaskAssignment[]
  Epic           Epic[]
}

model Epic {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deadlineAt    DateTime?
  authorId      String
  title         String
  description   String
  solvesProblem String?
  text          String?
  platform      String?
  budget        String?
  repositoryUrl String?
  websiteUrl    String?
  Task          Task[]
  User          User      @relation(fields: [authorId], references: [id])
}

model Task {
  id             String           @id @default(cuid())
  epicId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deadlineAt     DateTime?
  completedAt    DateTime?
  title          String
  description    String
  text           String?
  Epic           Epic             @relation(fields: [epicId], references: [id])
  TaskAssignment TaskAssignment[]
}

model TaskAssignment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  taskId    String
  User      User     @relation(fields: [userId], references: [id])
  Task      Task     @relation(fields: [taskId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

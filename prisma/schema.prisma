generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  surname        String?
  username       String?          @unique @default(cuid())
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  epic           Epic[]
  sessions       Session[]
  task           Task[]
  taskAssignment TaskAssignment[]
}

model Epic {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deadlineAt    DateTime?
  title         String
  description   String
  solvesProblem String?
  text          String?
  platform      String?
  budget        String?
  repositoryUrl String?
  websiteUrl    String?
  authorId      String
  user          User      @relation(fields: [authorId], references: [id])
  task          Task[]
}

model Task {
  id             String           @id @default(cuid())
  epicId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deadlineAt     DateTime?
  completedAt    DateTime?
  title          String
  description    String
  text           String?
  authorId       String
  views          Int              @default(0)
  user           User             @relation(fields: [authorId], references: [id])
  epic           Epic             @relation(fields: [epicId], references: [id])
  taskAssignment TaskAssignment[]
}

model TaskAssignment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Experience {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  aliases     String[]
  color       String   @default("#000000")
  createdAt   DateTime @default(now())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
